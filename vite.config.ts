import { defineConfig, Plugin } from 'vite';
import { createFilter } from 'rollup-pluginutils';
// import vue from '@vitejs/plugin-vue'
import vue from 'rollup-plugin-vue';
import fs from 'fs';

export function pullScss(options: any = {}): Plugin {
  const {
    filename = 'theme.scss',
    include = ['/**/*.css', '/**/*.scss', '/**/*.sass'],
    exclude,
    prependData = null,
    copyFiles = [],
    appendData = null,
  } = options;

  const filter = createFilter(include, exclude);

  const styles = new Map();

  const sassSeperator = '\n\n\n';

  function sass(name: string, code: string) {
    return [`/*\n  START ${name}\n*/`, code, `/*\n  END ${name}\n*/`].join(
      '\n'
    );
  }

  return {
    name: 'sass',
    transform(code, id) {
      if (!filter(id)) return;
      styles.set(id, code);
      return `/* redacted scss "${id}" */`;
    },
    generateBundle(options, bundle, isWrite) {
      if (!filename || !isWrite) return;
      const components = [`/* AUTOGENERATED SASS FILE */`];

      if (prependData) components.push(sass('PREPEND_DATA', prependData));

      for (const { input, output } of copyFiles) {
        this.emitFile({
          type: 'asset',
          fileName: output,
          source: fs.readFileSync(input, 'utf8'),
        });
      }

      for (const [id, code] of styles) components.push(sass(id, code));

      if (appendData) components.push(sass('APPEND_DATA', appendData));

      this.emitFile({
        type: 'asset',
        fileName: filename,
        source: components.join(sassSeperator),
      });
    },
  };
}
const commonScss = fs.readFileSync('src/scss/common.scss', 'utf8');

// https://vitejs.dev/config/
export default defineConfig({
  build: {
    lib: {
      entry: 'src/main.ts',
      name: 'deconf-ui',
      fileName: (format) => `deconf-ui.${format}.js`,
    },
    rollupOptions: {
      external: ['vue'],
      output: {
        globals: {
          vue: 'Vue',
        },
      },
    },
  },
  css: {
    preprocessorOptions: {
      scss: {
        additionalData: commonScss,
      },
    },
  },
  plugins: [
    pullScss({
      prependData: [
        commonScss,
        fs.readFileSync('src/scss/app.scss', 'utf8'),
      ].join('\n\n\n'),
      copyFiles: [{ input: 'src/scss/common.scss', output: 'common.scss' }],
      filename: 'app.scss',
    }),
    vue({
      preprocessStyles: false,
    }),
  ],
});
