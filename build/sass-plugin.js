//
// A plugin for rollup to take all sass out and combine into a single scss
// file to be imported by clients
//

import { createFilter } from 'rollup-pluginutils';
import fs from 'fs';

const sassSeperator = '\n\n\n';
const sassBlock = (name, inner) =>
  [`/*\n  START ${name}\n*/`, inner, `/*\n  END ${name}\n*/`].join('\n');

// function stripComments(scss) {
//   return scss.replace(/^\/\/.*\n/gm, '').replace(/^\n/gm, '');
// }

/** @returns {import("rollup").PluginHooks} */
export default function(options = {}) {
  const {
    filename = 'theme.scss',
    include = ['/**/*.css', '/**/*.scss', '/**/*.sass'],
    exclude,
    prependData = null,
    copyFiles = [],
    appendData = null
  } = options;

  const filter = createFilter(include, exclude);

  const styles = new Map();

  return {
    name: 'scss',
    transform(code, id) {
      if (!filter(id)) return;

      styles.set(id, code);

      return '// redacted scss';
    },
    generateBundle(options) {
      // filename === null isn't ideal but works for now to disable output from rollup.config.js
      if (options.output === false || filename === null) return;

      const components = [`/* AUTOGENERATED SASS FILE */`];

      if (prependData) {
        components.push(sassBlock('PREPEND_DATA', prependData));
      }

      if (Array.isArray(copyFiles)) {
        for (const { input, output } of copyFiles) {
          if (typeof input !== 'string' || typeof output !== 'string') {
            console.error('Invalid copyFiles %o', { input, output });
            continue;
          }

          this.emitFile({
            type: 'asset',
            fileName: output,
            source: fs.readFileSync(input, 'utf8')
          });
        }
      }

      // Compose sass into blocks
      for (const [id, code] of styles) {
        components.push(sassBlock(id, code));
      }

      if (appendData) {
        components.push(sassBlock('APPEND_DATA', appendData));
      }

      // Emit the new file
      this.emitFile({
        type: 'asset',
        fileName: filename,
        source: components.join(sassSeperator)
      });
    }
  };
}
