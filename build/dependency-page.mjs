import glob from 'globby';
import fs from 'fs/promises';
import path from 'path';
import dedent from 'dedent';

/**
 * @typedef {{
 *  name: string,
 *  path: string,
 *  i18n: string[],
 *  icons: string[],
 *  sass: string[],
 *  events: string[],
 *  components: string[]
 *  notes: string[]
 * }} ComponentDefinition
 */

async function main() {
  const files = await glob('src/**/*.vue');

  /** @type {Array<ComponentDefinition>} */
  const output = [];

  for (const componentPath of files) {
    const file = await fs.readFile(componentPath, 'utf8');

    /** @type {ComponentDefinition} */
    const result = {
      name: path.basename(componentPath).replace('.vue', ''),
      path: componentPath,
      i18n: [],
      icons: [],
      sass: [],
      events: [],
      components: [],
      notes: [],
    };

    let mode = null;
    for (const line of file.split('\n')) {
      if (!line.startsWith('// ')) {
        mode = null;
        continue;
      }
      if (mode) {
        result[mode].push(line.replace('// - ', ''));
      }

      if (line.includes('// i18n')) mode = 'i18n';
      if (line.includes('// icons')) mode = 'icons';
      if (line.includes('// sass')) mode = 'sass';
      if (line.includes('// notes')) mode = 'notes';
      if (line.includes('// events')) mode = 'events';
    }

    for (const match of file.matchAll(/components:\s+{([\w\W]+?)}/g)) {
      result.components = result.components.concat(
        match[1]
          .split(',')
          .map((c) => c.trim())
          .filter((c) => c)
      );
    }

    for (const key of Object.keys(result)) {
      if (result[key].length === 0) {
        result[key].push('n/a');
      }
    }

    output.push(result);
  }

  if (process.argv.includes('--json')) {
    console.log(JSON.stringify(output, null, 2));
    return;
  }

  const listify = (input) =>
    input.map((str) => `<li><code>${str}</code></li>`).join('');

  const componentItem = (component) => {
    return component !== 'n/a' && component !== 'FontAwesomeIcon'
      ? `<li><a href="#${component}">${component}</a></li>`
      : `<li>${component}</li>`;
  };
  const title = 'Deconf Component Dependencies';
  const componentHtml = output.map(
    (comp) => dedent`
      <article id="${comp.name}">
        <h2><a href="#${comp.name}">#</a> ${comp.name}</h2>
        <pre>${comp.path}</pre>
        <h3>i18n</h3>
        <ul>${listify(comp.i18n)}</ul>
        <h3>icons</h3>
        <ul>${listify(comp.icons)}</ul>
        <h3>sass</h3>
        <ul>${listify(comp.sass)}</ul>
        <h3>events</h3>
        <ul>${listify(comp.events)}</ul>
        <h3>components</h3>
        <ul>${comp.components.map(componentItem).join('')}</ul>
        <h3>notes</h3>
        <ul>${listify(comp.notes)}</ul>
      </article>
    `
  );

  const html = dedent`
  <html lang="en" dir="ltr">
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>${title}</title>
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/water.css">
      <style>
        header {
          padding-bottom: 1rem;
        }
        article {
          border: 2px dashed var(--border);
          margin-bottom: 2rem;
          padding: 0 1rem;
          border-radius: 6px;
        }
        article ul {
          margin-block-start: -1rem;
        }
      </style>
    </head>
    <body>
      <header>
        <h1>${title}</h1>
        <p>
          Use this page to see the dependencies of deconf-ui components.
          This page was generated by parsing the special comments in the <code>.vue</code> files
          and by directly parsing the <code>components: { ... }</code> section of the definition.
          It may contain errors.
          You can click on child components to navigate to their definition.
        </p>
      </header>
      ${componentHtml.join('')}
    </body>
  </html>
  `;
  console.log(html);
}

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
